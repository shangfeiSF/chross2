#!/usr/bin/env node
var fs = require('fs')
var path = require('path')
var child_process = require('child_process')

var nopt = require('nopt')
var Promise = require('bluebird')

var knowns = {
  'module': String
}
var shorts = {
  '-m': ['--module']
}
var options = nopt(knowns, shorts, process.argv, 2)

var params = []
options.module && params.push('--module', options.module)

var execAsync = Promise.promisify(child_process.exec, {
  context: child_process,
  multiArgs: true
})

var lib = path.join(__dirname, 'lib')
var files = fs.readdirSync(lib)

var gulpFile = files.filter(function (file) {
  return path.basename(file) === path.basename(__filename) + '.gulp.js'
}).pop()
var webpackFile = files.filter(function (file) {
  return path.basename(file) === path.basename(__filename) + '.webpack.js'
}).pop()

var gulpCmd = ['gulp', '--gulpfile', path.join(lib, gulpFile)]
var webpackCmd = ['webpack', '--config', path.join(lib, webpackFile)]

var rejected = function (error) {
  console.log(error.cmd)
  console.log(error.message)
}

execAsync(gulpCmd.join(' '), __dirname)
  .then(function (details) {
    console.log(details[0])
    console.log(details[1])

    return execAsync(webpackCmd.join(' '), __dirname)
  }, rejected)
  .then(function (details) {
    console.log(details[0])
    console.log(details[1])

    var clean = gulpCmd.concat(['clean'])
    return execAsync(clean.join(' '), __dirname)
  }, rejected)
  .then(function (details) {
    console.log(details[0])
    console.log(details[1])

    var open = gulpCmd.concat(['open']).concat(params)
    return execAsync(open.join(' '), __dirname)
  }, rejected)
  .then(function (details) {
    console.log(details[0])
    console.log(details[1])
  }, rejected)